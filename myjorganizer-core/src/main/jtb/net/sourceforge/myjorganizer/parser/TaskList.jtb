options{  JDK_VERSION = "1.6";  static = false;}PARSER_BEGIN(TaskCommandsParser)package net.sourceforge.myjorganizer.parser;import net.sourceforge.myjorganizer.parser.syntaxtree.*;import net.sourceforge.myjorganizer.parser.visitor.*;public class TaskCommandsParser{  public static void main(String args []) throws ParseException  {    TaskCommandsParser parser = new TaskCommandsParser(System.in);    parser.TaskCommands();  }}PARSER_END(TaskCommandsParser)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}/* KEYWORDS */TOKEN :{  < TASK : "task" >| < TITLE : "title" >| < DESCRIPTION : "description" >| < REPEATS : "repeats" >| < DEPENDENCIES : "dependencies" >| < COMPLETION : "completion" >| < URGENT : "urgent" >| < IMPORTANT : "important" >| < END : "end" >| < NOT : "not" >| < BEFORE : "before" >| < AFTER : "after" >| < STATUS : "status" >| < STARTDATE : "startdate" >| < DUEDATE : "duedate" >| < INSERT : "insert" >| < UPDATE : "update" >| < DELETE : "delete" >| < DONE : "done" >| < NULL : "null" >| < SET : "set" >| < ADD : "add" >| < DEPENDENCY : "dependency" >}TOKEN :{  < COLON : ":" >| < PERCENT : "%" >}/* LITERALS */TOKEN :{  < BOOL_LITERAL :    "true"  | "false" >| < IDENTIFIER : < IDENTIFIER_START > (< IDENTIFIER_CHAR >)* >| < #IDENTIFIER_START : [ "_", "A"-"Z", "a"-"z" ] >| < #IDENTIFIER_CHAR :    < IDENTIFIER_START >  | [ "0"-"9" ] >| < #NON_NULL_DIGIT : [ "1"-"9" ] >| < #ZERO : "0" >| < #DIGIT :    < ZERO >  | < NON_NULL_DIGIT > >| < INTEGER_LITERAL :    < ZERO >  |    (      < NON_NULL_DIGIT > (< DIGIT >)*    ) >| < STRING_LITERAL :    "\""    (      (~[ "\"", "\\", "\n", "\r" ])    |      (        "\\"        (          [ "n", "t", "b", "r", "f", "\\", "'", "\"" ]        | [ "0"-"7" ] ([ "0"-"7" ])?        | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]        )      )    )*    "\"" >| < DATE_LITERAL : ([ "0"-"9" ])+ "-" ([ "0"-"9" ])+ "-" ([ "0"-"9" ])+ >}void TaskCommands() :{}{  (    TaskCommand()  )+}void TaskCommand() :{}{  TaskInsertCommand()| TaskUpdateCommand()| TaskDeleteCommand()| TaskDoneCommand()}void TaskInsertCommand() :{}{  < INSERT > TaskDefinition()}void TaskUpdateCommand() :{}{  < UPDATE > < TASK > < IDENTIFIER > < COLON >  (    UpdateField()  )+  < END > < UPDATE >}void TaskDeleteCommand() :{}{  < DELETE > < TASK > < IDENTIFIER >}void TaskDoneCommand() :{}{  < DONE > < TASK > < IDENTIFIER >}void TaskDefinition() :{}{  < TASK > < IDENTIFIER > < COLON > TaskTitle()  (    OptionalField()  )*  < END > < TASK >}void OptionalField() :{}{  TaskDescription()| TaskCompletion()| TaskUrgency()| TaskImportance()| TaskStatus()| TaskStartDate()| TaskDueDate()| DependencyList()}void TaskTitle() :{}{  < TITLE > < COLON > < STRING_LITERAL >}void TaskDescription() :{}{  < DESCRIPTION > < COLON >  (    < STRING_LITERAL >  | < NULL >  )}void TaskCompletion() :{}{  < COMPLETION > < COLON > < INTEGER_LITERAL > < PERCENT >}void TaskUrgency() :{}{  < URGENT > < COLON > < BOOL_LITERAL >}void TaskImportance() :{}{  < IMPORTANT > < COLON > < BOOL_LITERAL >}void TaskStartDate() :{}{  < STARTDATE > < COLON >  (    < DATE_LITERAL >  | < NULL >  )}void TaskDueDate() :{}{  < DUEDATE > < COLON >  (    < DATE_LITERAL >  | < NULL >  )}void TaskStatus() :{}{  < STATUS > < COLON > < STRING_LITERAL >}void DependencyList() :{}{  < DEPENDENCIES > < COLON >  (    DependencyDefinition()  )+  < END > < DEPENDENCIES >}void DependencyDefinition() :{}{  (    < BEFORE >  | < AFTER >  )  < IDENTIFIER >}void UpdateField() :{}{  < SET > EditableField()| DependencyAdd()| DependencyDelete()}void EditableField() :{}{  TaskTitle()| TaskDescription()| TaskCompletion()| TaskUrgency()| TaskImportance()| TaskStatus()| TaskStartDate()| TaskDueDate()}void DependencyAdd() :{}{  < ADD > < DEPENDENCY > DependencyDefinition()}void DependencyDelete() :{}{  < DELETE > < DEPENDENCY > DependencyDefinition()}